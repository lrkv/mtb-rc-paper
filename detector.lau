\documentclass{article}
\usepackage[a4paper]{geometry}
\usepackage{xltxtra, polyglossia, url, hyperref, enumitem}
\usepackage[backend=biber]{biblatex}
\addbibresource{bibliography.bib}
% \usepackge{ecos}
\setdefaultlanguage{english}
% \setmainfont{Cambria}

\begin{document}
% \paper{Smart Occupancy Detector on Railroad Model Track}
\author{Jan Horáček}{MENDELU}
\author{Jiří Rybička}{MENDELU}
\abstract

For a control of a model railway, simple track occupancy detectors are in use
to detect presence and absence of a vehicle on the track. However, these detectors
do not use a full potential of a digital command control (DCC) system.
A RailCom technology allows information to be obtained from the vehicle's DCC decoder,
so the detector can receive operationally important data from the rolling stock vehicle.
Subject of the paper is the description of requirements and design of an
own RailCom detector MTB-RC, which presents an alternative to the commercially-available
products. MTB-RC is an open-source and open-hardware project, which is also
compatible with the rest of a trackside hardware used in the Track Vehicle
Control Laboratory FBE MENDELU. MTB-RC can read addresses of the DCC decoders
present on the track and transmit it to the railway control software via MTBbus.

\endabstract

% \keyw{railroad, model, interlocking, RailCom, occupancy detector, Digital
% Command Control, DCC, economic sustainability}

% \JEL{L920}

\section{Introduction}

The model railway in the Track Vehicle Control Laboratory is a complex
computer-controlled electronic system. One of the key components required for
the safe operation of a (model) railway is a track occupancy detector. The
detector detects presence of a vehicle -- an engine or a car -- in a section.
The railway is then divided into multiple sections, each section is connected
to one detector. A small model station with 3 tracks can contain circa 10
sections.

In the model, the track occupancy detector basically detects whether the current flows
through the rails -- from one rail to another. In Digital Command Control (DCC) \cite{dcc-wg}
system, each engine contains a \textit{decoder} (a small electronic module)
which draws some small current continuously. Each axle of a car contains an
embedded resistor (15 kOhm) to draw the current as well.  Thus any present
vehicle in the model track draws current and this current in detected by track
occupancy detector as a voltage drop on a diode (other methods to detect
current exist too).

In some situations, however, a different approach to the occupancy detection
is beneficial. An extension of a DCC protocol called \textit{RailCom}
allows the information to be read from vehicle's decoder by the detector \cite{railcom-dccwiki}.
The decoder must support RailCom, but most of the decoders nowadays
have the support implemented and even enabled by default.
Also, the RailCom detector only reads information from the decoders, so cars
are not detected by the detector. Thus, the RailCom detector cannot simply
replace current-based detector mentioned previously. The RailCom
detector must be perceived as an extension to the current-based detection.
A technology with different usages, different implementation, different price.

\section{DCC}

The Digital Command Control (DCC) protocol was created in 1992 by
National Model Railroad Association (NMRA) \cite{dcc-history}. The association
in cooperation with companies producing model railroad hardware created a DCC
Working group, which then released standards describing DCC from electrical and
protocol point of view.

The DCC was designed as a one-way protocol. The data flows from the
\textit{command station} to the vehicle's decoders via tracks. The command station is
controlled by throttles or computers. Main purpose of the command station is to generate DCC
signal. The signal is sometimes amplified by a \textit{DCC booster}.
The decoder is usually a small electronic module (e.g. 1×3 cm) with a powerful
microcontroller which decodes DCC and controls the vehicle. Each decoder has its
address, so different engines can be distinguished. The decoder controls mainly
(1) motor, (2) lights, (3) sounds.

% Address of a decoder could be either
% \textit{basic} (1–127) or \textit{extended} (1–9999) \cite{dcc-addr}. On large
% layout, extended addresses are usually used, so we will focus mainly on this
% format, however compatibility with vehicles with basic address should be kept.

\begin{figure}[h]
	\centering
	\includegraphics[width=0.8\textwidth]{data/dcc-packet.pdf}
	\caption{An example of a DCC packet \cite{nmra-s9.2}.}
	\label{dcc-packet}
\end{figure}

DCC transmits data in packets using voltage between rails \cite{nmra-s9.2}.
We call wires from command station or a booster to track lines \texttt{J} and \texttt{K}.
At each instant of a time, one rail compared to another has either positive or
negative voltage. Length of pulses distinguishes logical 0 (100~us pulse) and 1
(58~us pulse). Each packet can contain different number of bytes. See figure
\ref{dcc-packet}.

The command station transmits packets one by another, cyclically addressing
all decoders it wants to command. It is important to send the data
(e.g. speed command) cyclically, because the command station does not know
whether the decoder received the command successfully. The decoder could
be temporary busy, the engine could temporary loose electrical contact to rails etc.

Detailed specification of a DCC protocol is available in \cite{nmra-s9.2}.

\section{RailCom}
\label{railcom}

In 2006, a NMRA standard \cite{nmra-railcom} describing an extension of a DCC
protocol was released. The standard describes so-called \textit{RailCom
protocol}, which allows the mobile decoders to transmit data back to the
command station while normally operational.

The principle is as follows: in the space between DCC packets (right of a
figure \ref{dcc-packet}), the decoder transmits data. The decoder must contain
a capacitor which gives it enough power for transmission. An overview of
components participating in a RailCom transmission is shown in figure
\ref{decoder-transmission}.

\begin{figure}[h]
	% \includegraphics[width=0.8\textwidth]{data/railcom-components.pdf}
	\caption{Components present in RailCom transmission.}
	\label{decoder-transmission}
\end{figure}

RailCom transmission in current-based. To transmit a \texttt{0}, the decoder must supply a
current of $30+4/-6$~mA with a voltage drop at the track of up to $2.2$~V. To
transmit a \texttt{1}, the current must be at the most $\pm 0.1$~mA \cite{nmra-railcom}.
Compared to a voltage-based design, current-based transmission is much more
resistant to interferences. However a special switch
in the command station or a booster is required. The switch just connects
output \texttt{J} and \texttt{K} wires together, so the current loop is closed.
There are command stations and boosters with and without RailCom support. Thus,
RailCom-supported booster or command station is required.

The last part in \ref{decoder-transmission} is a \textit{detector}. The detector
is a device, which reads data from the decoder. The detector senses current
generated by the decoder and reads the data. Note there may be multiple detectors in
the current loop, which is beneficial in some situations.

From the data point of view, RailCom transmission is a 250 kbis/s
single-direction UART \cite{nmra-railcom}. This is large gap from DCC
communication, which has an average speed of 6 kbit/s.

The decoder transmits data in 2 channels serially. Channel 1 usually contains an address
of a decoder transmitting the data, channel 2 contains response to a
DCC command requesting the decoder to respond (e.g. read configuration from the
decoder or acknowledgement).

\section{Requirements}

Based on the possibilities of the RailCom, we infer usecases in which
the protocol is beneficial and requirements for the solution.

We will focus on a address-reading capability of RailCom. There are other
important usages -- e.g. the command station does not have to resend data
to the decoder cyclically, if the decoder confirmed (via RailCom) that it received
the DCC packet correctly. However, the aim of this paper is to focus on
a decoder-address-reading capability.

Reading of a decoder's address is beneficial in situations, when the address
is unknown. Usually, when train is in movement on a computer-controlled railroad
like the one in Track Vehicle Control Laboratory, the software already knows
its address, because it must have commanded it to move. We identified following
situations, in which RailCom technology is useful.

\begin{enumerate}
	\item Shunting in a train depot. \\
	In the depot, engines are usually changed between rails fast and often.
	They are even sometimes packed or unpacked by the owner. Moving the
	responsibility to track vehicle's addresses from the operator to a
	device seems to be beneficial.
	\item Track for new engines. \\
	There is usually a track or tracks at the model railroad specifically
	designed for mounting new vehicles. The detector may automate
	creating of a new train by automatically detecting new engine's DCC address.
	\item Handover track. \\
	When part of the track is managed by an other railroad control system, the
	detector may be used on the entering track from foreign system to detect
	incoming vehicle's address.
\end{enumerate}

Based on the usecases, the detector should support several track circuits. The
detector should be able to read decoder's address. If more vehicles are present
(e.g. multitraction, multiple engines on a track in depot etc.) the detector
should be able to read addresses of all of them. The detector should transmit detected
addresses to the \textit{train control system}. The detector should be financially
available, customizable and fixable/replaceable for long-time sustainability.

\section{State of the art}

There are several industrial solutions for obtaining the address of a vehicle on
the track.

\subsection{LRC120 by Lenz Elektronik}

Lenz Elektronik manufactures the \textit{LRC120} RailCom Display module. The
module is able to display the address of the decoder in the connected track
section on the four-digit display. The module is available from many vendors,
for example AMB Models \cite{lrc120}.

Main disadvantage of the module is absence of an interface for reporting the
address.

\subsection{10808 detector by Roco}

One of the largest companies producing vehicles and equipment for model
railways offers the \textit{Z21 10808 detector}. The detector can be connected
to Roco Z21 command station using R-Bus or CAN. It supports 8 sections and allows
various settings. To use RailCom, CAN bus must be used together with Roco Z21
command station \cite{z21det}.

From our points of view, disadvantage of this solution is a vendor-lock requiring
use of the Roco command station. Deployment would also require to add cabling.

\subsection{YD6016LN-RC by YaMoRC (Digikeijs)}

The company Digikeijs, which offered a widespread and popular DCC hardware
recently announced the end of its activities. The successor company is called
YaMoRC, the products are similar.

YaMoRC offers YD6016LN-RC RailCom track occupancy detector (similar to former
Digikeijs DR5088RC) with 16 track sections. The detector supports per-track
channel-1 address reporting and one global detector for reading other data
from vehicles. All information from the YD6016LN-RC is transported via the
\textit{LocoNet} bus, with firmware updates possible over a USB connection.
The module is configurable over USB. \cite{yd6016ln-rc}.

However, the module is not available now and its deployment would require
additional cabling to connect it to the command station.

\subsection{RailComDisplay by F. M. Cañada}

A well-known enthusiast for the DCC automation F. M. Cañada designed a RailCom
module with display, which shows address of a DCC decoder similar to LRC120
\cite{paco-railcom}.

This module is local-only (without any bus), however the big advantage of the
RailComDisplay is availability of schematics. The module is a source of useful
inspiration.

\subsection{Conclusion}

Several commercial RailCom feedback modules exist, each has its own advantages
and disadvantages. For our requirements, we decided to design an own RailCom
detector \textit{MTB-RC}. The detector will be compatible with existing track
hardware (no need to add more cabling), it will be fully customizable as the
whole design is upon us. Moreover, we will provide an opensource and openhardware
alternative to the existing commercial products.

\section{MTB-RC}

MTB-RC should support following features.

\begin{enumerate}
	\item Support for 8 track circuits. \\
	This number is a good compromise between scalability and price.
	\item Connection to the MTBbus \cite{mtb}. \\
	MTBbus is currently used for stationary hardware control in Track Vehicle
	Control Laboratory.
	\item Opensource and openhardware design.
\end{enumerate}

\subsection{Principles of design}

Now we describe important principles of design of the MTB-RC RailCom detector.

The detector shall be connected to the MTBbus and DCC. These two buses are
generally galvanic separated, so the design should be composed of two
top-level galvanic separated parts.

\begin{enumerate}[noitemsep]
	\item DCC part,
	\item MTB part.
\end{enumerate}

The detector must contain a microcontroller (MCU) to process the data. It is not desired
for the MCU to be powered-off when DCC to the track is disconnected
(e.g. because of short-circuit on the track). So the MCU must lay in the MTB
part powered from MTBbus power supply.

MTB part of the detector shall contain standard MTB-module components like on
e.g. MTB-UNI module \cite{mtb}.

\begin{itemize}[noitemsep]
	\item Jumpers to select address
	\item Indication LEDs
	\item RS485 driver (an integrated circuit)
	\item Button
\end{itemize}

An important question is how the data shall be transferred from the DCC part to the MTB
part (and vice versa if required). To answer the question we need to understand
how the RailCom detection works in general.

\subsection{RailCom detection principle}

The RailCom detection principle is described in \cite{nmra-railcom} in detail.
Here, we briefly describe key principles.

As we discussed in \ref{railcom}, one of the \texttt{J} and \texttt{K} wires from
the command station (or the booster) to the track is simply cut and both ends
are connected to the detector. Let's assume "K" wire is cut. A figure
\ref{detection-principle} shows how these two ends are connected inside the
detector.

\begin{figure}[h]
	\centering
	\includegraphics[width=0.3\textwidth]{data/detection.pdf}
	\caption{RailCom current detection principle.}
	\label{detection-principle}
\end{figure}

Current flow causes a voltage drop $U_{KIN-KOUT}$ on R1, which is then measured. In addition,
protective Schottky diodes D1 and D2 are added to avoid high temperature of
R1 while maximum continuous current of $3$~A flows. The detector must use adequate
parts and adequate resistor size to dissipate the heat. Schottky diodes are used
so the maximum voltage between \texttt{KIN} and \texttt{KOUT} is never more than cca $0.5$~V.

The voltage $U_{KIN-KOUT}$ is then compared using \textit{window comparator}
circuit. See figure \ref{window-comparator}.

\begin{figure}[h]
	\centering
	\includegraphics[width=0.5\textwidth]{data/comparators.pdf}
	\caption{A Window comparator circuit.}
	\label{window-comparator}
\end{figure}

The comparators are powered from e.g. -5V -- +5V with $0 =$~\texttt{KIN}. Voltage
references $\pm 18.5\ mV$ are defined in \cite{nmra-railcom}.

The comparators have an open-collector output. If $U_{KIN-KOUT} \in (-18.5 mV, +18.5 mV)$,
(logical 0 of RailCom), \texttt{DATA} is connected to -5V, otherwise (logical 1
of RailCom), \texttt{DATA} is in high-impedance state. Output data are directly
in UART format readable by MCU.

MTB-RC must contain 8 instances of circuits presented in figures
\ref{detection-principle} and \ref{window-comparator} to support 8 separate
track circuits.

\subsection{MTB-DCC interface}

As small MCUs with 8 separate UARTs basically do not exist, we suggest to use
multiplexing. We suggest to use STM32F103 ARM Cortex-M3 MCU, because
of its availability, relatively low price, powerful core and advanced peripherals \cite{stm32f103-datasheet}.
STM32F103 has 3 UARTs, out of which one must be used for MTBbus communication.
Remaining two UARTs shall be used for RailCom reading. This implies 4-way multiplexing.
The proposed solution is not ideal, as some data are always lost by design, but the loss
should not break address detection.

The multiplexer shall be present in DCC part. This implies no MCU in DCC part
is required. Interface between DCC part and MTB part shall consist of:

\begin{itemize}[noitemsep]
	\item 2 UARTs (DCC $\rightarrow$ MTB)
	\item 2 multiplexer-control wires (MTB $\rightarrow$ DCC)
	\item DCC signal (DCC $\rightarrow$ MTB)
	\item Cutout signal (DCC $\rightarrow$ MTB)
\end{itemize}

\textit{Cutout signal} is to inform MCU that RailCom cutout occurred, so the
MCU starts reading RailCom data (UARTs). \textit{DCC signal} is transmitted so
the processor can read the DCC from the command station, so it knows to which
command the decoder answers.

\subsection{Multiple decoders detection problem}

One of the key problems of RailCom detection is multiple decoders in a section.
As discussed in \ref{railcom}, each decoder sends its own address in channel 1,
which results in unreadable data when multiple decoders are present in a single
track section.

The idea of multiple address detection is to read DCC from the command station and
check for channel 2. If the command stations sends any command to a decoder present
in the track, the decoder (and only the decoder!) responds in channel 2. This
allows to detect decoders, even there is more of them on the track.
Necessary condition is the decoder being addressed by the command station.
This issue must be solved separately and is out of scope of this paper.

\section{Conclusion}

We described the design... TODO

\printbibliography

\end{document}
